/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kr.povice.mart;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
//@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-23")
public class ResultCode implements org.apache.thrift.TBase<ResultCode, ResultCode._Fields>, java.io.Serializable, Cloneable, Comparable<ResultCode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResultCode");

  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("CODE", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("MESSAGE", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("DESCRIPTION", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResultCodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResultCodeTupleSchemeFactory();

  public int CODE; // required
  public String MESSAGE; // required
  public String DESCRIPTION; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODE((short)1, "CODE"),
    MESSAGE((short)2, "MESSAGE"),
    DESCRIPTION((short)3, "DESCRIPTION");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("CODE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("MESSAGE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("DESCRIPTION", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResultCode.class, metaDataMap);
  }

  public ResultCode() {
  }

  public ResultCode(
    int CODE,
    String MESSAGE,
    String DESCRIPTION)
  {
    this();
    this.CODE = CODE;
    setCODEIsSet(true);
    this.MESSAGE = MESSAGE;
    this.DESCRIPTION = DESCRIPTION;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResultCode(ResultCode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.CODE = other.CODE;
    if (other.isSetMESSAGE()) {
      this.MESSAGE = other.MESSAGE;
    }
    if (other.isSetDESCRIPTION()) {
      this.DESCRIPTION = other.DESCRIPTION;
    }
  }

  public ResultCode deepCopy() {
    return new ResultCode(this);
  }

  @Override
  public void clear() {
    setCODEIsSet(false);
    this.CODE = 0;
    this.MESSAGE = null;
    this.DESCRIPTION = null;
  }

  public int getCODE() {
    return this.CODE;
  }

  public ResultCode setCODE(int CODE) {
    this.CODE = CODE;
    setCODEIsSet(true);
    return this;
  }

  public void unsetCODE() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  /** Returns true if field CODE is set (has been assigned a value) and false otherwise */
  public boolean isSetCODE() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  public void setCODEIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CODE_ISSET_ID, value);
  }

  public String getMESSAGE() {
    return this.MESSAGE;
  }

  public ResultCode setMESSAGE(String MESSAGE) {
    this.MESSAGE = MESSAGE;
    return this;
  }

  public void unsetMESSAGE() {
    this.MESSAGE = null;
  }

  /** Returns true if field MESSAGE is set (has been assigned a value) and false otherwise */
  public boolean isSetMESSAGE() {
    return this.MESSAGE != null;
  }

  public void setMESSAGEIsSet(boolean value) {
    if (!value) {
      this.MESSAGE = null;
    }
  }

  public String getDESCRIPTION() {
    return this.DESCRIPTION;
  }

  public ResultCode setDESCRIPTION(String DESCRIPTION) {
    this.DESCRIPTION = DESCRIPTION;
    return this;
  }

  public void unsetDESCRIPTION() {
    this.DESCRIPTION = null;
  }

  /** Returns true if field DESCRIPTION is set (has been assigned a value) and false otherwise */
  public boolean isSetDESCRIPTION() {
    return this.DESCRIPTION != null;
  }

  public void setDESCRIPTIONIsSet(boolean value) {
    if (!value) {
      this.DESCRIPTION = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unsetCODE();
      } else {
        setCODE((Integer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMESSAGE();
      } else {
        setMESSAGE((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDESCRIPTION();
      } else {
        setDESCRIPTION((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return getCODE();

    case MESSAGE:
      return getMESSAGE();

    case DESCRIPTION:
      return getDESCRIPTION();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return isSetCODE();
    case MESSAGE:
      return isSetMESSAGE();
    case DESCRIPTION:
      return isSetDESCRIPTION();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResultCode)
      return this.equals((ResultCode)that);
    return false;
  }

  public boolean equals(ResultCode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_CODE = true;
    boolean that_present_CODE = true;
    if (this_present_CODE || that_present_CODE) {
      if (!(this_present_CODE && that_present_CODE))
        return false;
      if (this.CODE != that.CODE)
        return false;
    }

    boolean this_present_MESSAGE = true && this.isSetMESSAGE();
    boolean that_present_MESSAGE = true && that.isSetMESSAGE();
    if (this_present_MESSAGE || that_present_MESSAGE) {
      if (!(this_present_MESSAGE && that_present_MESSAGE))
        return false;
      if (!this.MESSAGE.equals(that.MESSAGE))
        return false;
    }

    boolean this_present_DESCRIPTION = true && this.isSetDESCRIPTION();
    boolean that_present_DESCRIPTION = true && that.isSetDESCRIPTION();
    if (this_present_DESCRIPTION || that_present_DESCRIPTION) {
      if (!(this_present_DESCRIPTION && that_present_DESCRIPTION))
        return false;
      if (!this.DESCRIPTION.equals(that.DESCRIPTION))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + CODE;

    hashCode = hashCode * 8191 + ((isSetMESSAGE()) ? 131071 : 524287);
    if (isSetMESSAGE())
      hashCode = hashCode * 8191 + MESSAGE.hashCode();

    hashCode = hashCode * 8191 + ((isSetDESCRIPTION()) ? 131071 : 524287);
    if (isSetDESCRIPTION())
      hashCode = hashCode * 8191 + DESCRIPTION.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ResultCode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCODE()).compareTo(other.isSetCODE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCODE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CODE, other.CODE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMESSAGE()).compareTo(other.isSetMESSAGE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMESSAGE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MESSAGE, other.MESSAGE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDESCRIPTION()).compareTo(other.isSetDESCRIPTION());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDESCRIPTION()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DESCRIPTION, other.DESCRIPTION);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResultCode(");
    boolean first = true;

    sb.append("CODE:");
    sb.append(this.CODE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MESSAGE:");
    if (this.MESSAGE == null) {
      sb.append("null");
    } else {
      sb.append(this.MESSAGE);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DESCRIPTION:");
    if (this.DESCRIPTION == null) {
      sb.append("null");
    } else {
      sb.append(this.DESCRIPTION);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultCodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResultCodeStandardScheme getScheme() {
      return new ResultCodeStandardScheme();
    }
  }

  private static class ResultCodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResultCode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResultCode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.CODE = iprot.readI32();
              struct.setCODEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MESSAGE = iprot.readString();
              struct.setMESSAGEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DESCRIPTION = iprot.readString();
              struct.setDESCRIPTIONIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResultCode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI32(struct.CODE);
      oprot.writeFieldEnd();
      if (struct.MESSAGE != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.MESSAGE);
        oprot.writeFieldEnd();
      }
      if (struct.DESCRIPTION != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.DESCRIPTION);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultCodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResultCodeTupleScheme getScheme() {
      return new ResultCodeTupleScheme();
    }
  }

  private static class ResultCodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResultCode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResultCode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCODE()) {
        optionals.set(0);
      }
      if (struct.isSetMESSAGE()) {
        optionals.set(1);
      }
      if (struct.isSetDESCRIPTION()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCODE()) {
        oprot.writeI32(struct.CODE);
      }
      if (struct.isSetMESSAGE()) {
        oprot.writeString(struct.MESSAGE);
      }
      if (struct.isSetDESCRIPTION()) {
        oprot.writeString(struct.DESCRIPTION);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResultCode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.CODE = iprot.readI32();
        struct.setCODEIsSet(true);
      }
      if (incoming.get(1)) {
        struct.MESSAGE = iprot.readString();
        struct.setMESSAGEIsSet(true);
      }
      if (incoming.get(2)) {
        struct.DESCRIPTION = iprot.readString();
        struct.setDESCRIPTIONIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

