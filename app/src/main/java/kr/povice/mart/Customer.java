/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kr.povice.mart;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
//@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-23")
public class Customer implements org.apache.thrift.TBase<Customer, Customer._Fields>, java.io.Serializable, Cloneable, Comparable<Customer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Customer");

  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("NUMBER", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("NAME", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("EMAIL", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REGDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("REGDATE", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CustomerStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CustomerTupleSchemeFactory();

  public int NUMBER; // required
  public String NAME; // required
  public String EMAIL; // required
  public long REGDATE; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUMBER((short)1, "NUMBER"),
    NAME((short)2, "NAME"),
    EMAIL((short)3, "EMAIL"),
    REGDATE((short)4, "REGDATE");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUMBER
          return NUMBER;
        case 2: // NAME
          return NAME;
        case 3: // EMAIL
          return EMAIL;
        case 4: // REGDATE
          return REGDATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBER_ISSET_ID = 0;
  private static final int __REGDATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("NUMBER", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("NAME", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("EMAIL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGDATE, new org.apache.thrift.meta_data.FieldMetaData("REGDATE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Customer.class, metaDataMap);
  }

  public Customer() {
  }

  public Customer(
    int NUMBER,
    String NAME,
    String EMAIL,
    long REGDATE)
  {
    this();
    this.NUMBER = NUMBER;
    setNUMBERIsSet(true);
    this.NAME = NAME;
    this.EMAIL = EMAIL;
    this.REGDATE = REGDATE;
    setREGDATEIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Customer(Customer other) {
    __isset_bitfield = other.__isset_bitfield;
    this.NUMBER = other.NUMBER;
    if (other.isSetNAME()) {
      this.NAME = other.NAME;
    }
    if (other.isSetEMAIL()) {
      this.EMAIL = other.EMAIL;
    }
    this.REGDATE = other.REGDATE;
  }

  public Customer deepCopy() {
    return new Customer(this);
  }

  @Override
  public void clear() {
    setNUMBERIsSet(false);
    this.NUMBER = 0;
    this.NAME = null;
    this.EMAIL = null;
    setREGDATEIsSet(false);
    this.REGDATE = 0;
  }

  public int getNUMBER() {
    return this.NUMBER;
  }

  public Customer setNUMBER(int NUMBER) {
    this.NUMBER = NUMBER;
    setNUMBERIsSet(true);
    return this;
  }

  public void unsetNUMBER() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field NUMBER is set (has been assigned a value) and false otherwise */
  public boolean isSetNUMBER() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNUMBERIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public String getNAME() {
    return this.NAME;
  }

  public Customer setNAME(String NAME) {
    this.NAME = NAME;
    return this;
  }

  public void unsetNAME() {
    this.NAME = null;
  }

  /** Returns true if field NAME is set (has been assigned a value) and false otherwise */
  public boolean isSetNAME() {
    return this.NAME != null;
  }

  public void setNAMEIsSet(boolean value) {
    if (!value) {
      this.NAME = null;
    }
  }

  public String getEMAIL() {
    return this.EMAIL;
  }

  public Customer setEMAIL(String EMAIL) {
    this.EMAIL = EMAIL;
    return this;
  }

  public void unsetEMAIL() {
    this.EMAIL = null;
  }

  /** Returns true if field EMAIL is set (has been assigned a value) and false otherwise */
  public boolean isSetEMAIL() {
    return this.EMAIL != null;
  }

  public void setEMAILIsSet(boolean value) {
    if (!value) {
      this.EMAIL = null;
    }
  }

  public long getREGDATE() {
    return this.REGDATE;
  }

  public Customer setREGDATE(long REGDATE) {
    this.REGDATE = REGDATE;
    setREGDATEIsSet(true);
    return this;
  }

  public void unsetREGDATE() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REGDATE_ISSET_ID);
  }

  /** Returns true if field REGDATE is set (has been assigned a value) and false otherwise */
  public boolean isSetREGDATE() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REGDATE_ISSET_ID);
  }

  public void setREGDATEIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REGDATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUMBER:
      if (value == null) {
        unsetNUMBER();
      } else {
        setNUMBER((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetNAME();
      } else {
        setNAME((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEMAIL();
      } else {
        setEMAIL((String)value);
      }
      break;

    case REGDATE:
      if (value == null) {
        unsetREGDATE();
      } else {
        setREGDATE((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUMBER:
      return getNUMBER();

    case NAME:
      return getNAME();

    case EMAIL:
      return getEMAIL();

    case REGDATE:
      return getREGDATE();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUMBER:
      return isSetNUMBER();
    case NAME:
      return isSetNAME();
    case EMAIL:
      return isSetEMAIL();
    case REGDATE:
      return isSetREGDATE();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Customer)
      return this.equals((Customer)that);
    return false;
  }

  public boolean equals(Customer that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_NUMBER = true;
    boolean that_present_NUMBER = true;
    if (this_present_NUMBER || that_present_NUMBER) {
      if (!(this_present_NUMBER && that_present_NUMBER))
        return false;
      if (this.NUMBER != that.NUMBER)
        return false;
    }

    boolean this_present_NAME = true && this.isSetNAME();
    boolean that_present_NAME = true && that.isSetNAME();
    if (this_present_NAME || that_present_NAME) {
      if (!(this_present_NAME && that_present_NAME))
        return false;
      if (!this.NAME.equals(that.NAME))
        return false;
    }

    boolean this_present_EMAIL = true && this.isSetEMAIL();
    boolean that_present_EMAIL = true && that.isSetEMAIL();
    if (this_present_EMAIL || that_present_EMAIL) {
      if (!(this_present_EMAIL && that_present_EMAIL))
        return false;
      if (!this.EMAIL.equals(that.EMAIL))
        return false;
    }

    boolean this_present_REGDATE = true;
    boolean that_present_REGDATE = true;
    if (this_present_REGDATE || that_present_REGDATE) {
      if (!(this_present_REGDATE && that_present_REGDATE))
        return false;
      if (this.REGDATE != that.REGDATE)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + NUMBER;

    hashCode = hashCode * 8191 + ((isSetNAME()) ? 131071 : 524287);
    if (isSetNAME())
      hashCode = hashCode * 8191 + NAME.hashCode();

    hashCode = hashCode * 8191 + ((isSetEMAIL()) ? 131071 : 524287);
    if (isSetEMAIL())
      hashCode = hashCode * 8191 + EMAIL.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(REGDATE);

    return hashCode;
  }

  @Override
  public int compareTo(Customer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNUMBER()).compareTo(other.isSetNUMBER());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNUMBER()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NUMBER, other.NUMBER);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNAME()).compareTo(other.isSetNAME());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNAME()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NAME, other.NAME);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEMAIL()).compareTo(other.isSetEMAIL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEMAIL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EMAIL, other.EMAIL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetREGDATE()).compareTo(other.isSetREGDATE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetREGDATE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.REGDATE, other.REGDATE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Customer(");
    boolean first = true;

    sb.append("NUMBER:");
    sb.append(this.NUMBER);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NAME:");
    if (this.NAME == null) {
      sb.append("null");
    } else {
      sb.append(this.NAME);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("EMAIL:");
    if (this.EMAIL == null) {
      sb.append("null");
    } else {
      sb.append(this.EMAIL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("REGDATE:");
    sb.append(this.REGDATE);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CustomerStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CustomerStandardScheme getScheme() {
      return new CustomerStandardScheme();
    }
  }

  private static class CustomerStandardScheme extends org.apache.thrift.scheme.StandardScheme<Customer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Customer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.NUMBER = iprot.readI32();
              struct.setNUMBERIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NAME = iprot.readString();
              struct.setNAMEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.EMAIL = iprot.readString();
              struct.setEMAILIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.REGDATE = iprot.readI64();
              struct.setREGDATEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Customer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUMBER_FIELD_DESC);
      oprot.writeI32(struct.NUMBER);
      oprot.writeFieldEnd();
      if (struct.NAME != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.NAME);
        oprot.writeFieldEnd();
      }
      if (struct.EMAIL != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.EMAIL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REGDATE_FIELD_DESC);
      oprot.writeI64(struct.REGDATE);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CustomerTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CustomerTupleScheme getScheme() {
      return new CustomerTupleScheme();
    }
  }

  private static class CustomerTupleScheme extends org.apache.thrift.scheme.TupleScheme<Customer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Customer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNUMBER()) {
        optionals.set(0);
      }
      if (struct.isSetNAME()) {
        optionals.set(1);
      }
      if (struct.isSetEMAIL()) {
        optionals.set(2);
      }
      if (struct.isSetREGDATE()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetNUMBER()) {
        oprot.writeI32(struct.NUMBER);
      }
      if (struct.isSetNAME()) {
        oprot.writeString(struct.NAME);
      }
      if (struct.isSetEMAIL()) {
        oprot.writeString(struct.EMAIL);
      }
      if (struct.isSetREGDATE()) {
        oprot.writeI64(struct.REGDATE);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Customer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.NUMBER = iprot.readI32();
        struct.setNUMBERIsSet(true);
      }
      if (incoming.get(1)) {
        struct.NAME = iprot.readString();
        struct.setNAMEIsSet(true);
      }
      if (incoming.get(2)) {
        struct.EMAIL = iprot.readString();
        struct.setEMAILIsSet(true);
      }
      if (incoming.get(3)) {
        struct.REGDATE = iprot.readI64();
        struct.setREGDATEIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

